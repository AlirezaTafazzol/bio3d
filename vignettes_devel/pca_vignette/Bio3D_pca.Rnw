\documentclass{article}

\usepackage{geometry}
\geometry{verbose,tmargin=2.5cm,bmargin=2.5cm,lmargin=2.5cm,rmargin=2.5cm}

\usepackage{natbib}
\usepackage{color}
\definecolor{myurlblue}{rgb}{0.3,0.2,0.7}
\usepackage[colorlinks=true,urlcolor=myurlblue,pagecolor=black,citecolor=myurlblue,linkcolor=black]{hyperref}

\usepackage{graphicx}

\title{Comparative Sequence and Structure Analysis with Bio3D}
\author{Barry J. Grant, Xin-Qiu Yao and Lars Skjaerven\\
University of Michigan, Ann Arbor}


\begin{document}
\SweaveOpts{concordance=TRUE}
\maketitle

\section{Background}
Bio3D\footnote{The latest version of the package, full documentation and further vignettes (including detailed installation instructions) can be obtained from the main Bio3D website: \href{http://thegrantlab.org/bio3d/}{http://thegrantlab.org/bio3d/}} is an R package that provides interactive tools for the analysis of bimolecular structure, sequence and simulation data. The aim of this document, termed a vignette\footnote{This vignette contains executable examples, see \texttt{help(vignette)} for further details.} in R parlance, is to provide a brief task-oriented introduction to comparative sequence and structure analysis with the Bio3D R package \citep{grant06}. Various Bio3D utilities are introduced to demonstrate how to read and write sequence and structure data, perform homologous protein search, X-ray structures annotation, atom selection, re-orientation, superposition, rigid core identification, clustering, torsion analysis, distance matrix analysis, structure and sequence conservation analysis, and principal component analysis. In addition, the document illustrates utility functions that enable the statistical and graphical power of the R environment to work with biological sequence and structural data.

\paragraph{Requirements:}
Detailed instructions for obtaining and installing the Bio3D package on various platforms can be found in the \href{http://thegrantlab.org/bio3d/}{Installing Bio3D} vignette available both online and from within the Bio3D package. To see available vignettes use the command:

<<eval=FALSE>>=
vignette(package="bio3d")
@

Note that to follow along with this vignette the \href{http://www.drive5.com/muscle/}{MUSCLE multiple sequence alignment program} must be installed on your system and in the search path for executables. In addition, the \href{http://swift.cmbi.ru.nl/gv/dssp/}{DSSP secondary structure assignment program} must be installed and in the search path. Please see the installation vignette for full details. 

\section{Getting Started}
Start R, load the Bio3D package and use the command \texttt{demo("pdb")} and \texttt{demo("pca")} to get a quick feel for some of the tasks that we will be introducing in the following sections.

<<eval=FALSE>>=
library(bio3d)
demo("pdb")
demo("pca")
@

<<echo=FALSE>>=
library(bio3d)
@


\paragraph{Side-note:} Note that you will be prompted to hit the \texttt{RETURN} key at each step of the demo as this will allow you to see the particular functions being called. Also note that detailed documentation and example code for each function can be accessed via the \texttt{help()} and \texttt{example()} commands (e.g. \texttt{help(read.pdb)}).  You can also copy and paste any of the example code from the documentation of a particular function, or indeed this vignette, directly into your R session to see how things work. You can also find this \href{http://thegrantlab.org/bio3d/html/index.html}{documentation online}.


\subsection{Read a PDB Structure}
The code snippet below reads structure data online and returns an object \texttt{pdb} for further manipulation. The function \texttt{read.pdb()} is supplied with one input argument, the four letter RCSB Protein Data Bank (PDB) identifier \texttt{1tag}. 

<<eval=TRUE>>=
pdb <- read.pdb("1tag")
@ 

%\paragraph{Side-note:} If you have your PDB file stored on your local hard disk, use the path to that file as the argument of \texttt{read.pdb()}.

Alternatively, you can read a PDB file directly from your local file system using the file name (or the full path to the file) as an argument to \texttt{read.pdb()}:
<<eval=FALSE>>=
pdb <- read.pdb("myfile.pdb")
pdb <- read.pdb("/path/to/my/data/myfile.pdb")
@ 


A short summary of the \texttt{pdb} object can be obtained by simply calling the function print(): 
<<>>=
print(pdb)
@

To examine the contents of the \texttt{pdb} object in more detail we can use the \texttt{attributes} function:
<<eval=TRUE>>=
attributes(pdb)
@

These attributes describe the list components that comprise the pdb object, and each individual component can be accessed using the \texttt{\$} symbol (e.g.~\texttt{pdb\$atom}). Their complete description can be found on the  \texttt{read.pdb()} functions help page accessible with the command: \texttt{help(read.pdb)}. Note that the \texttt{atom} component is a matrix consisting of all atomic coordinate ATOM data, with a row per ATOM and a column per record type. The column names can be used as a convenient means of data access, for example to access coordinate data for the first three atoms in our newly created \texttt{pdb} object:

<<>>=
pdb$atom[1:3, c("resno","resid","elety","x","y","z")]
@

In the example above we used numeric indices to access atoms 1 to 3, and a character vector of column names to access the specific record types. In a similar fashion the \texttt{atom.select()} function returns numeric indices that can be used for convenient data access: 

<<results='hide'>>=
ca.inds <- atom.select(pdb, "calpha")
@

The returned \texttt{ca.inds} object is a list containing atom and xyz numeric indices corresponding to the selection (all C-alpha atoms in this particular case). The indices can be used to access e.g.~the Cartesian coordinates of the selected atoms (\texttt{pdb\$xyz[ca.inds\$xyz]}), or residue numbers and B-factor data for the selected atoms:

<<fig=TRUE, fig.cap="Residue B-factor data for PDB id 1TAG. Grey boxes depict secondary structure elements in the structure (dark grey: alpha helices; light grey: beta sheets).">>=
resnos <- pdb$atom[ca.inds$atom, "resno"]
bfacts <- pdb$atom[ca.inds$atom, "b"]
plot.bio3d(resnos, bfacts,
           sse=pdb, ylab="Bfactor", xlab="Residue Number")
@

In the above example we use these indices to plot residue number vs B-factor along with a basic secondary structure schematic (provided with the argument \texttt{sse=pdb}; Figure 1). As a further example of data access lets extract the sequence for the loop region (P-loop) between strand 3 (beta 1) and helix 1 in our \texttt{pdb} object.

<<>>=
loop <- pdb$sheet$end[3]:pdb$helix$start[1]
loop.inds <- atom.select(pdb,paste("///", paste(loop, collapse=","), 
                                   "///CA/", sep=""))
pdb$atom[loop.inds$atom, "resid"]
aa321(pdb$atom[loop.inds$atom, "resid"])
@ 
In the above example the residue numbers in the \texttt{sheet} and \texttt{helix} components of \texttt{pdb} are accessed and used in a subsequent atom selection. The \texttt{aa321()} function converts between three-letter and one-letter IUPAC amino acid codes.

\paragraph{Question:} How would you do to select all backbone atoms? HINT: \texttt{help(atom.select)} and check out the keyword \texttt{string}.
\paragraph{Question:} How would you do to select all sidechain atoms? HINT: Consider two steps and check out \texttt{help(combine.sel)}.


\subsection{Read Example Data}
A number of example datasets are included with the bio3d package. The main purpose of including this data (which may be generated by the user by following the extended examples documented within the various bio3d functions) is to allow users to more quickly appreciate the capabilities of functions that would otherwise require data input and processing before execution.

\paragraph{The Transducin Heterotrimeric G Proteins}
For the worked examples in the current document we will utilize the included transducin dataset.  A related dataset formed the basis of the work described in \citep{yao13}.  Briefly, heterotrimeric G proteins are molecular switches that turn on intracellular signaling cascades in response to the activation of G protien coupled receptors (GPCRs). Receptor activation by extracellular stimuli promotes a cycle of GTP binding and hydrolysis on the G protein alpha subunit. 

Heterotrimeric G proteins undergo cycles of GTP-dependent conformational rearrangements and alterations of their oligomeric abg form to convey receptor signals to downstream effectors.  Interaction with activated receptor promotes the exchange of GDP for GTP on the G protein alpha subunit (Ga) and its separation from its beta-gammar subunit partners (Gbg). The current dataset consists of transducin (including Gt and Gi/o) alpha subunit sequence and structural data and can be loaded with the command \texttt{data(transducin)}:

<<transducin>>=
data(transducin)
attach(transducin)
@ 
\paragraph{Side-note:}The transducin dataset can be assembled from scratch with the \texttt{get.pdb()}, \texttt{pdbsplit},  and \texttt{pdbaln()} commands bellow, which only show as an example the procedure for a subset of transducin PDB ids (See Section 3 for more details): 

<<loadtransducin, eval=FALSE>>=
## Download and split transducin PDB files
ids<-c("1TND_B","1AGR_A","1FQJ_A","1TAG_A","1GG2_A","1KJY_A")
raw.files <- get.pdb(ids)
files <- pdbsplit(raw.files, ids)

## Alignment
pdbs <- pdbaln(files)
@

\subsubsection{The Kinesin Molecular Motor}
We also utilize the included kinesin dataset especially for demostrating sequence analysis for a protein family with diverse sequences.  A related dataset formed the basis of the work described in \citep{grant07}.  Briefly, kinesins are molecular motor proteins responsible for the ATP dependent transport of cellular cargo along microtubules.  Kinesin family members have been found in all eukaryotic organisms, where they contribute to the transport of molecules and organelles, organisation and maintenance of the cytoskeleton, and the segregation of genetic material during mitosis and meiosis. 

The defining attribute of kinesin family members is the possession of one or more globular motor domains. These $\sim$350 residue domains are responsible for ATP hydrolysis, microtubule binding and force production. The current dataset consists of kinesin motor domain sequence and structural data and can be loaded with the command \texttt{data(kinesin)}:

<<kinesin, eval=FALSE>>=
data(kinesin)
attach(kinesin)
@ 

\paragraph{Side-note:}To check out the components, and their meanings, in the transducin/kinesin dataset, type \texttt{help(example.data)}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% --------------
% Third section 
% --------------

\section{Constructing Structure Ensemble for Protein Family}
Comparing multiple structures of homologous proteins and carefully analysing large multiple sequence alignments can help identify patterns of sequence and structural conservation and highlight conserved interactions that are crucial for protein stability and function \citep{grant07}.  Bio3d and R provide a useful framework for such studies and facilitate the integration of sequence, structure and dynamics data in the analysis of protein evolution.

\subsection{Find Available Sets of Similar Structures}
In this tutorial, to collect available transducin crystal structures, we first use BLAST to query the PDB database to find similar sequences (and hence structures) to our chosen representative (PDB id 1tag):

<<>>=
pdb <- read.pdb("1tag")
seq <- pdbseq(pdb)
blast <- blast.pdb(seq)
@ 
Examining the alignment scores and their associated E-values (with the function \texttt{plot.blast()}) indicates a sensible normalized score (-log(E-Value)) cutoff of ~240 bits (Figure 2).

\begin{center}
<<blasthits, fig=TRUE, fig.cap="BLAST against PDB database with query sequence PDB id 1tag">>=
hits <- plot.blast(blast, cutoff=240)
head(hits$hits)
@ 
\end{center}

\paragraph{Sidenote}: The function \texttt{pdb.annotate()} can help to fetch more detailed information about the corresponding structures, e.g. title, experimental method, resolution, ligand name(s), citation, etc., providing the PDB ids:
<<>>=
anno <- pdb.annotate(hits$pdb.id)
head(anno[, c("resolution", "ligandId", "citation")])
@

\subsection{Multiple Sequence Alignment}
Next we download the complete list of structures from the PDB (with function \texttt{get.pdb()}), and use function \texttt{pdbsplit()} to split the structures into separate chains and store them on the hard drive for subsequent access. Finally, function \texttt{pdbaln()} will extract the sequence of each structure and perform a multiple sequence alignment to determine residue-residue correspondences (\textbf{NOTE:} requires external program \textit{MUSCLE} in search path):

<<getpdbs, eval=FALSE>>=
unq.ids <- unique( substr(hits$pdb.id, 1, 4) )
##- Download and chain split PDBs
raw.files <- get.pdb(unq.ids, path="raw_pdbs")
files <- pdbsplit(raw.files, ids=hits$pdb.id, path="raw_pdbs/split_chain")

##- Extract and align sequences
pdbs <- pdbaln(files)
@ 
Inspect the alignment (the automatically generated ``aln.fa'' file) with your favorite alignment viewer (e.g. SEAVIEW, available from: \href{http://pbil.univ-lyon1.fr/software/seaview.html}{http://pbil.univ-lyon1.fr/software/seaview.html}). 

\paragraph{Side-note:}It is possible that you may find some structures with missing residues (or gaps in the alignment) at sites of particular interest (e.g. switch regions in the case of transducin). This will prevent you from investigating the structural variation about these important sites and so may cause misleading results in your studies. To solve this problem, you may exclude these ``bad'' sequences from your hit list and generate a smaller, but with higher quality dataset for further exploration.

\paragraph{Question:} How to generate a \texttt{pdbs} object with a subset hit PDB ids?


\section{Comparative Structure Analysis}
The detailed comparison of homologous protein structures can be used to infer pathways for evolutionary adaptation and, at closer evolutionary distances, mechanisms for conformational change. The bio3d package employs refined structural superposition and principal component analysis (PCA) to examine the relationship between different conformers. 

\subsection{Structure Superposition}
Conventional structural superposition of proteins minimizes the root mean square difference between their full set of equivalent residues. However, for the current application such a superposition procedure can be inappropriate. For example, in the comparison of a multi-domain protein that has undergone a hinge-like rearrangement of its domains, standard all atom superposition would result in an underestimate of the true atomic displacement by attempting superposition over all domains (whole structure superposition). A more appropriate and insightful superposition would be anchored at the most invariant region and hence more clearly highlight the domain rearrangement (sub-structure superposition). 

The \texttt{core.find()} function implements an iterated superposition procedure, where residues displaying the largest positional differences are identified and excluded at each round.  The function returns an ordered list of excluded residues, from which the user can select a subset of 'core' residues upon which superposition can be based.

<<eval=FALSE>>=
core <- core.find(pdbs)
@ 
There are \texttt{plot.core()} and \texttt{print.core()} functions available for further examining the output of \texttt{core.find()} (Figure 3).
\begin{center}
<<fig=TRUE, fig.cap="Identification of core residues">>=
col=rep("black", length(core$volume))
col[core$volume<2]="pink"; col[core$volume<1]="red"
plot(core, col=col)
@
\end{center}
The \texttt{print.core()} function also returns \texttt{atom} and \texttt{xyz} indices.  Below we select a subset of positions with a cumulative ellipsoid volume of less than 1.0 \AA $^3$ and use the returned indices to write a quick PDB file for viewing in a molecular graphics program (Figure 4).  
<<>>=
inds <- print(core, vol=1.0)
write.pdb(xyz=pdbs$xyz[1,inds$xyz], resno=pdbs$resno[1,inds$atom], file="quick_core.pdb")
@ 
\begin{figure}[htb]
\begin{center}
\includegraphics[width=80mm]{figs/core.png}
\caption{Core (the most structural invariant) positions in transducin family}
\end{center}
\end{figure}

We can now superpose all structures on the selected core indices with the \texttt{fit.xyz()} function.
<<eval=TRUE>>=
xyz <- fit.xyz( fixed = pdbs$xyz[1,],
               mobile = pdbs,
               fixed.inds  = inds$xyz,
               mobile.inds = inds$xyz)
@

The above command performs the actual superposition and stores the new coordinats in the matrix object \texttt{xyz}.  By providing several extra arguments to \texttt{fit.xyz()} a directory, here named \texttt{fitlsq}, containing superposed structures can be produced.
<<eval=FALSE>>=
xyz <- fit.xyz( fixed = pdbs$xyz[1,],
               mobile = pdbs,
               fixed.inds  = inds$xyz,
               mobile.inds = inds$xyz,
               prefix = files,
               pdbext = ".pdb",
               outpath = "fitlsq",
               full.pdbs = TRUE)
@ 
These can then be viewed in your favoriate molecular graphics program (Figure 5).

\begin{figure}[htb]
\begin{center}
\includegraphics[width=80mm]{figs/fit.png}
\caption{Structure ensemble of transducin family superposed based on core positions}
\end{center}
\end{figure}

\paragraph{Question:} Are the gap positions in \texttt{xyz} the same as those in \texttt{pdbs\$xyz}?

\subsection{Principal Component Analysis (PCA)}
Following core identification and subsequent superposition, PCA can be employed to examine the relationship between different structures based on their equivalent residues. The application of PCA to both distributions of experimental structures and molecular dynamics trajectories, along with its ability to provide considerable insight into the nature of conformational differences has been discussed previously (see \citep{grant07} and references therein).  

Briefly, the resulting principal components (orthogonal eigenvectors) describe the axes of maximal variance of the distribution of structures. Projection of the distribution onto the subspace defined by the largest principal components results in a lower dimensional representation of the structural dataset. The percentage of the total mean square displacement (or variance) of atom positional fluctuations captured in each dimension is characterized by their corresponding eigenvalue. Experience suggests that 3--5 dimensions are often sufficient to capture over 70 percent of the total variance in a given family of structures. Thus, a handful of principal components are sufficient to provide a useful description while still retaining most of the variance in the original distribution \citep{grant06}. 

<<eval=TRUE>>=
## Ignore gap containing positions
gaps.res <- gap.inspect(pdbs$ali)
gaps.pos <- gap.inspect(pdbs$xyz)

##-- Do PCA
pc.xray <- pca.xyz(xyz[, gaps.pos$f.inds])
@ 

\paragraph{Question:}Why is the input to function \texttt{pca.xyz()} \texttt{xyz} rather than \texttt{pdbs\$xyz}?


The above sequence of commands returns the indices of two structures and the indices for gap containing positions, both of which we exclude from subsequent PCA with the \texttt{pca.xyz()} command. A quick overview of the results of \texttt{pca.xyz()} can be obtained by calling \texttt{plot.pca()} (Figure 6).

\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="PCA of transducin X-ray structures">>=
plot(pc.xray, col=annotation[, "color"])
@ 
\end{center}

and calling  \texttt{plot.bio3d()} to examine the contribution of each residue to the first three principal components (Figure 7).

\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="Contribution of each residue to the first three principal components">>=
## Plot loadings in relation to reference structure "1TAG"
sse <- dssp(pdb, resno=FALSE)
     
ind <- grep("1TAG", pdbs$id)
res.ref <- which(!is.gap(pdbs$ali[ind,]))
res.ind <- which(res.ref %in% gaps.res$f.ind)
op <- par(no.readonly=TRUE)
par(mfrow = c(3, 1), cex = 0.6, mar = c(3, 4, 1, 1))
plot.bio3d(res.ind, pc.xray$au[,1], sse=sse, ylab="PC1 (A)")
plot.bio3d(res.ind, pc.xray$au[,2], sse=sse, ylab="PC2 (A)")
plot.bio3d(res.ind, pc.xray$au[,3], sse=sse, ylab="PC3 (A)")
par(op)
@ 
\end{center}

The plots in figures 6 and 7 display the relationships between different conformers, highlight positions responsible for the major differences between structures and enable the interpretation and characterization of multiple interconformer relationships.


To further aid interpretation, a PDB format trajectory can be produced that interpolates between the most dissimilar structures in the distribution along a given principal cmponent.  This involves dividing the difference between the conformers into a number of evenly spaced steps along the principal components, forming the frames of the trajectory. Such trajectories can be directly visualized in a molecular graphics program, such as VMD \citep{vmd}. Furthermore, the interpolated structures can be analyzed for possible domain and shear movements with the DynDom package \citep{dyndom}, or used as initial seed structures for more advanced reaction path refinement methods such as Conjugate Peak Refinement \citep{cpr}.

<<eval=FALSE>>=
a <- mktrj.pca(pc.xray, pc=1, file="pc1.pdb",
               resno = pdbs$resno[1, gaps.res$f.inds],
               resid = aa123(pdbs$ali[1, gaps.res$f.inds]) )
@

\begin{figure}[htb]
\begin{center}
\includegraphics[width=80mm]{figs/pca.png}
\caption{Interpolated structures along PC1}
\end{center}
\end{figure}

\subsection{Conformer Clustering in PC Space}
PCA provides a way of data representation with each dimension or principal component (PC) along the axis of maximum structural variance. Clustering of structures in the PC space enable us to focus on the major structural change in the dataset, with a controllable the level of dynamic details (via specifying the number of PCs used in the clustering). For example, with clustering in the 1 to 2 PCs, we can investigate how the X-ray structures of transducin relate to each other with respect to the major conformation change that covers over 65\% structural variance (See above Figure 6). 

\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="Clustering based on PC1-PC2">>=
hc <- hclust(dist(pc.xray$z[,1:2]))
grps <- cutree(hc, h=30)
cols <- c("red", "green", "blue")
plot(pc.xray$z[, 1:2], typ="p", pch=16, cex=1, col=cols[grps], xlab="PC1", ylab="PC2")
plot(hc, labels=pdbs$id, main="PC1-2", xlab="", ylab="Distance")
abline(h=30, lty=3, col="gray60")
@ 
\end{center}

In the PC1-PC2 plane, the inactive ``GDP'' state of structures (green points in Figure 6) are further split into two sub-groups (Figure 9 \& 10). The bottom-right sub-group (blue) exclusively correspond to the structures complexed with GDP dissociation inhibitor (GDPi).

\paragraph{Question:} What is the difference between the clustering method using PCs and that using RMSD?


\subsection{More Structural Analysis}
Bio3d facilitates the analysis of various structural properties, such as root mean-square deviation (RMSD), root mean-square fluctuation (RMSF), secondary structure, dihedral angles, difference distance matrices etc. The current section provides a brief exposure to using bio3d in this vein. 

\paragraph{Root mean square deviation (RMSD):}
RMSD is a standard measure of structural distance between coordinate sets.
\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="Histogram of RMSD among transducin structures">>=
rmsd.fit <- rmsd(xyz[,gaps.pos$f.inds])
hist(rmsd.fit[upper.tri(rmsd.fit)], breaks=20, xlab="RMSD (Å)")
@ 
\end{center}

\paragraph{Question:}What about the RMSD distribution without fitting? What about fitting based on all Carbon-alpha positions?


Clustering based RMSD:
\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="Clustering based on RMSD">>=
hc2 <- hclust(as.dist(rmsd.fit))
plot(hc2, labels=pdbs$id, ylab="RMSD", xlab="")
@ 
\end{center}


\paragraph{Root mean squared fluctuations (RMSF):}
RMSF is another often used measure of conformational variance. It usually returns a vector of atom-wise (or residue-wise) variance instead of a single numeric value.
<<>>=
rf <- rmsf(xyz[, gaps.pos$f.inds])
@ 

\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="RMSF plot">>=
plot.bio3d(res.ind, rf, sse=sse, ylab="RMSF (A)", xlab="Position")
@ 
\end{center}


\paragraph{Torsion/Dihedral analysis and Difference distance matrix analysis (DDM):}
The conformation of a polypeptide or nucleotide chain can be usefully described in terms of angles of internal rotation around its constituent bonds.
<<>>=
tor <- torsion.pdb(pdb)
## basic Ramachandran plot
@ 
\begin{center}
<<fig=TRUE, echo=TRUE, fig.cap="Ramachandran plot of the structure with PDB id 1tag">>=
plot(tor$phi, tor$psi, xlab="phi", ylab="psi")
@ 
\end{center}

<<>>=
a.xyz <- pdbs$xyz["1TAG_A",]
b.xyz <- pdbs$xyz["1TND_B",]

gaps.xyz <- is.gap(pdbs$xyz["1TAG_A",])
gaps.res <- is.gap(pdbs$ali["1TAG_A",])
resno <- pdbs$resno["1TAG_A",!gaps.res]

a <- torsion.xyz(a.xyz[!gaps.xyz],atm.inc=1)
b <- torsion.xyz(b.xyz[!gaps.xyz],atm.inc=1)
d.ab <- wrap.tor(a-b)

a <- dm(a.xyz[!gaps.xyz])
b <- dm(b.xyz[!gaps.xyz])
ddm <- a - b

@ 

\begin{center}
<<fig=TRUE, echo=TRUE, fig.cap="Torsion angle difference between structures in GDP (1tag) and GTP (1tnd) nucleotide states">>=
sse2 <- dssp(read.pdb("1tag"))
op <- par(no.readonly=TRUE)
par(mfrow=c(2,1), mar=c(4,4,0,1))
plot(resno, d.ab, typ="h", xlab="", ylab="Angle")
plot.bio3d(resno, abs(d.ab), typ="h", sse=sse2, xlab="Residue", ylab="Angle")
par(op)
@

<<fig=TRUE,echo=TRUE, fig.cap="Difference of distance matrices between structures in GDP(1tag) and GTP(1tnd) nucleotide states">>=
plot(ddm, nlevels=10, grid.col="gray", resnum.1=resno, resnum.2=resno,
     xlab="1tag", ylab="1tnd (positions relative to 1tag)")
@
\end{center}

\paragraph{Question:}What are the pros and cons of different methods: PCA, RMSD, RMSF, torsion, and distance matrix?


\section{Sequence Conservation Analysis}
In this section, we illustrate several functions related to sequence conservation analysis with the kinesin dataset. The \texttt{read.fasta} and  \texttt{write.fasta} functions can be used to read and write aligned and non aligned sequences in FASTA format. 

\subsection{Sequence Alignment}
The \texttt{seqaln()} function permits the alignment of multiple sequences as obtained from the \texttt{read.fasta()}.  A simple alignment procedure for the sequences in the file \emph{unaligned.fa} would involve the commands:
<<eval=FALSE>>=
aln <-  seqaln(read.fasta("unaligned.fa")) 
@ 

\subsection{Residue Conservation Analysis}
To assess the level of sequence conservation at each position in
an alignment, the \emph{similarity}, \emph{identity}, and \emph{entropy} per position can be calculated with the \texttt{conserv()} function.

The \emph{similarity} is defined as the average of the similarity
scores of all pairwise residue comparisons for that position in
the alignment, where the similarity score between any two residues
is the score value between those residues in the chosen
substitution matrix.

The \emph{identity} i.e. the preference for a specific amino acid to be
found at a certain position, is assessed by averaging the identity
scores resulting from all possible pairwise comparisons at that
position in the alignment, where all identical residue comparisons
are given a score of 1 and all other comparisons are given a value
of 0.

\emph{Entropy} is based on Shannon's information entropy. See the
\texttt{entropy} function for further details.

<<>>=
data(kinesin)
attach(kinesin, warn.conflicts=FALSE)
sim <- conserv(x=pdbs$ali, method="similarity", sub.matrix="bio3d")
write.fasta(pdbs, file="kinesin.fa")
aln <- read.fasta("kinesin.fa")
@ 

\paragraph{Side-note:} The last two lines in above code snippet are just for illustrating the usage of the function \texttt{read.fasta()}. In examples all through the document, the \texttt{aln} object can be replaced by \texttt{pdbs} because the latter contains all the components of the former.

\begin{center}
<<fig=TRUE,echo=TRUE, fig.cap="Residue conservation of kinesin protein family">>=
pdb2 <- read.pdb("1bg2")
sse2 <- dssp(pdb2, resno=FALSE)
plot.bio3d(sim[!is.gap(aln$ali[1,])], sse=sse2, xlab="Residue", ylab="Similarity")
@ 
\end{center}

The \texttt{aln2html()} function renders a sequence alignment as coloured HTML suitable for viewing with a web browser.
<<eval=FALSE>>=
write.fasta(seqs=aln$ali[,379:385], file="eg.fa")
aln2html(aln, append=FALSE, file="eg.html")
aln2html(aln, colorscheme="ent", file="eg.html")
@ 

\paragraph{Question:}What is the relationship between sequence conservation and structural variance?

\subsection{Inter-sequence Evolutionary Analysis}

\paragraph{Pairwise identity analysis}
Pairwise identity analysis is an efficient way to remove too close sequences in the analysis, with the help of the funciton \texttt{ide.filter()}:
<<fig=TRUE, fig.cap="Sequence identity distribution before and after filter (cutoff=0.6)">>=
ide.mat <- seqidentity(pdbs)

# Histogram of pairwise identity values
op <- par(no.readonly=TRUE)
par(mfrow=c(2,1))
hist(ide.mat[upper.tri(ide.mat)], breaks=30,xlim=c(0,1),
     main="Sequence Identity", xlab="Identity")

k <- ide.filter(ide=ide.mat, cutoff=0.6)
ide.cut <- seqidentity(pdbs$ali[k$ind,])
hist(ide.cut[upper.tri(ide.cut)], breaks=10, xlim=c(0,1),
     main="Sequence Identity", xlab="Identity")
par(op)
@

\paragraph{Consensus sequence}
Determines the consensus sequence for a given alignment at a given identity cutoff value. For clarity, we take the positions from 50 to 100 of the protein:
<<fig=TRUE, fig.cap="Consensus sequence identified for kinesin protein family">>=
con <- consensus(aln$ali[,50:100])
print(con$seq)

# Plot residue frequency matrix
col <- mono.colors(32)
aa  <- rev(rownames(con$freq))

image(x=1:ncol(con$freq),
      y=1:nrow(con$freq),
      z=as.matrix(rev(as.data.frame(t(con$freq)))),
      col=col, yaxt="n", xaxt="n",
      xlab="Alignment Position", ylab="Residue Type")

# Add consensus along the axis
axis(side=1, at=seq(0,length(con$seq),by=5), labels=seq(50, 100, by=5))
axis(side=2, at=c(1:22), labels=aa)
axis(side=3, at=c(1:length(con$seq)), labels =con$seq)
axis(side=4, at=c(1:22), labels=aa)
grid(length(con$seq), length(aa))
box()

# Add consensus sequence
for(i in 1:length(con$seq)) {
  text(i, which(aa==con$seq[i]),con$seq[i],col="white")
}

# Add lines for residue type separation
abline(h=c(2.5,3.5, 4.5, 5.5, 3.5, 7.5, 9.5,
         12.5, 14.5, 16.5, 19.5), col="gray")
@

\paragraph{Question:}What can we learn from a combined comparative sequence and structure analysis?



<<echo=FALSE>>=
detach(transducin)
detach(kinesin)
@


\subsection*{Session Info}
<<>>=
toLatex(sessionInfo())
@ 

\begin{thebibliography}{9}


\bibitem[Grant \emph{et al.}, 2006]{grant06}
Grant, B.J. and Rodrigues, A.P.D.C and Elsawy, K.M. and Mccammon, A.J. and Caves, L.S.D. (2006)
\textbf{Bio3d: an R package for the comparative analysis of protein structures.}
\emph{Bioinformatics},
\textbf{22}, 2695--2696.


\bibitem[Grant \emph{et al.}, 2007]{grant07}
Grant, B.J. and Mccammon, A.J. and Caves, L.S.D. and Cross, R.A. (2007)
\textbf{Multivariate Analysis of Conserved Sequence-Structure Relationships in Kinesins: Coupling of the Active Site and a Tubulin-binding Sub-domain.}
\emph{J. Mol. Biol.},
\textbf{5}, 1231--1248


\bibitem[Fischer and Karplus, 1992]{cpr}
Fischer, S. and Karplus, M. (1992) 
\textbf{Conjugate peak refinement: an algorithm for finding reaction paths and accurate transition states in systems with many degrees of freedom.}
\emph{Chem. Phys. Lett}, \textbf{194}, 252--261


\bibitem[Hayward and Berendsen, 1989]{dyndom}
Hayward, S. and Berendsen, H. (1998) 
\textbf{Systematic analysis of domain motions in proteins from conformational change: new results on citrate synthase and T4 lysozyme.}
\emph{Proteins}, \textbf{30}, 144--154


\bibitem[Humphrey \emph{et al.}, 1996]{vmd}
Humphrey, W., et al. (1996) 
\textbf{VMD: visual molecular dynamics.}
\emph{J. Mol. Graph}, \textbf{14}, 33--38


\bibitem[Yao and Grant, 2013]{yao13}
Yao, X.Q. and Grant, B.J. (2013) 
\textbf{Domain-opening and dynamic coupling in the alpha-subunit of heterotrimeric G proteins.}
\emph{Biophys. J}, \textbf{105}, L08--10


\end{thebibliography}




\end{document}

